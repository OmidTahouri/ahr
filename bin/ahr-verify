#!/bin/bash


STOPONERROR=1


if [ "$1" = "--stoponerror=false" ]; then
    STOPONERROR=0
fi


function report_abend(){
    local message=$*

    echo $*
    if [ $STOPONERROR = 1 ]; then
        exit 1
    fi
}


BASEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. $BASEDIR/ahr-lib.sh


echo "CHECK: certificate is valid today"

if [ ! -f $APIGEE_NET_CHAIN ]; then
    report_abend "ABEND: File not found \$APIGEE_NET_CHAIN: $APIGEE_NET_CHAIN"
fi

certNotAfter=$(openssl x509 -in $APIGEE_NET_CHAIN -dates -noout | awk '/notAfter/{ printf( "%d%02d%02d",$4,(index( "|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|", substr($1,index($1,"=")+1))-2 )/4+1, $2 ) }')
today=$(date +"%Y%m%d")
if [[ "$today" > "$certNotAfter" ]]; then
    report_abend "ABEND: Certicate Not After Date is less than today: Today: $today; Not After: $certNotAfter."
fi



echo "CHECK: Mart host alias resolves into mart ip"
mart_ip=$(dig +short $MART_HOST_ALIAS)
if [ "$mart_ip" != "$MART_IP" ]; then

    report_abend "ABEND: Mart Host Alias does not resolve to the Mart IP. Host Alias: $MART_HOST_ALIAS; Dig: $mart_ip; IP: $MART_IP."
fi

echo "CHECK: Runtime host alias resolves into runtime ip"
runtime_ip=$(dig +short $RUNTIME_HOST_ALIAS)
if [ "$runtime_ip" != "$RUNTIME_IP" ]; then

    report_abend echo "ABEND: Runtime Host Alias does not resolve to the Runtime IP. Host Alias: $RUNTIME_HOST_ALIAS; Dig: $runtime_ip; IP: $RUNTIME_IP."
fi


# sa keys

function check_sa_key(){
    comp=$1
    json=$2 

    echo -n "CHECK: $comp SA Key file is valid: "

    output=$(ahr-sa-ctl key $comp $json)

    exit_code=$?
    if [ ! $exit_code = 0 ]; then
        echo "no."
        report_abend "ABEND: Problem with key $json for $comp component. Exit code: $exit_code. Output: $output"
    else
        echo "yes."
    fi
}

check_sa_key mart $MART_SA

check_sa_key udca $UDCA_SA

check_sa_key synchronizer $SYNCHRONIZER_SA

check_sa_key metrics $METRICS_SA



# prereqs: enabled apigee.googleapis.com


REQUIRED_APIS="logging.googleapis.com apigee.googleapis.com apigeeconnect.googleapis.com compute.googleapis.com cloudresourcemanager.googleapis.com"


function check_api_enabled() {
    api=$1

    status=$(gcloud services list --format="value(config.name)" --filter="config.name:$1 state=enabled"|wc -l)

    echo $status
}

exit_flag=
for api in $REQUIRED_APIS; do
    echo -n "CHECK: $api API is enabled: "

    if [ "$(check_api_enabled $api)" -eq 1 ]; then
       echo "yes."
    else
       echo "no".
       exit_flag=1
    fi
done

if [ ! -z "$exit_flag" ]; then 
    report_abend -e "\n\nABEND: Enable required APIs"
fi
